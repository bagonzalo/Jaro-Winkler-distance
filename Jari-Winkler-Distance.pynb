def Jaro_Winkler_distance (a, b):

    # matching window:
    m_w = m.floor(max(len(a), len(b)) / 2) - 1
    large = a if len(a) > len(b) else b
    small = a if len(a) <= len(b) else b
    match = 0
    trans = 0
    l = 0
    p = 0.1

    # dictionary with common characters: same character & num. of repetitions:
    d_cc = {}
    # dictionary with common occurances:
    d_co = {}

    d_large = {}
    d_small = {}
    t_large_order = ()
    t_small_order = ()

#     print(m_w)
#     print(small)
#     print(large)

    for i in small:
        if ((i in large) & (i in small)):
            if i not in d_cc: 
                if abs(large.find(i) - small.find(i)) <= m_w: 

                    match += 1
                    d_cc[i] = 1
                    d_co[i] = 1
                    d_large[i] = [large.find(i)]
                    d_small[i] = [small.find(i)]
                    t_large_order += ((match, i, large.find(i)), )
                    t_small_order += ((match, i, small.find(i)), )

            else:

                if len(findOccurences(large, i)) > d_cc[i]: 

                    if abs(large.find(i, findOccurences(large, i)[d_cc[i] - 1] + 1) \
                           - small.find(i, findOccurences(small, i)[d_co[i] - 1] + 1)) <= m_w: 

                        match += 1
                        d_large[i].append(large.find(i, findOccurences(large, i)[d_cc[i] - 1] + 1))
                        d_small[i].append(small.find(i, findOccurences(small, i)[d_co[i] - 1] + 1))
                        t_large_order += ((match, i, large.find(i, findOccurences(large, i)[d_cc[i] - 1] + 1)), )
                        t_small_order += ((match, i, small.find(i, findOccurences(small, i)[d_co[i] - 1] + 1)), )
                        d_cc[i] += 1

                    d_co[i] += 1

    t_large_order = sorted(t_large_order, key=lambda x: x[2])
    t_small_order = sorted(t_small_order, key=lambda x: x[2])

    for i, j in zip(t_large_order, t_small_order):
        if (i[0] != j[0]) and (i[1] != j[1]): trans += 1

    for i in range(len(small)):
        if large[i] == small[i]: l += 1
        else: break

    # print(match)
    # print(d_large)
    # print(d_small)
    # print(t_large_order)
    # print(t_small_order)

    # print("m: %d" %match)
    # print("t: %d" %trans)
    # print("l: %d" %l)
    # print("p: %d" %p)


    # Jaro-Winkler distance (based on Jaro distance):

    t = trans / 2
    dJ = 0 if match == 0 else (1/3)*(match/len(a) + match/len(b) + (match-t)/match)
    dJW = dJ + l * p * (1 - dJ) 

    print("Jaro distance: %f" %dJ)
    print("Jaro-Winkler distance: %f" %dJW)
    return(dJW)
